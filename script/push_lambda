#!/bin/bash
# A wrapper around `aws lambda create-function` to create a new Lambda function

# Exit immediately if a command exits with a non-zero status
set -e

AWS_S3_BUCKET=${AWS_S3_BUCKET:-swintonatgithubdotcom}  # If variable not set, use default.
AWS_S3_BUCKET_PATH=${AWS_S3_BUCKET_PATH:-lambda}  # If variable not set, use default.


function usage() {
    if [[ $# -eq 0 ]] ; then
        echo "$(basename ${0}) <function-name> <package-zip>"
        exit 0
    fi
}

function exists() {
    # Returns true if function already exists
    function_name="$1"

    # Attempt to get-function, this will return a non-zero exist code if
    # the function doesn't exist
    aws lambda get-function --function-name "${function_name}" >/dev/null 2>&1

    if [[ $? -eq 0 ]]
    then
        # get-function didn't error, therefore function exists, return true
        # 0 = true!
        return 0
    else
        # get-function errored, therefore function does not exist, return false
        # 1 = false!
        return 1
    fi
}

function role_arn() {
    # Returns the role Arn associated with the specified role
    aws iam get-role --role-name "$1" | \
        jq --raw-output ".Role.Arn"
}

function create() {
    function_name="$1"
    package="$2"
    arn=$( role_arn "lambda-default" )

    # Copy package to S3
    aws s3 cp "${package}" s3://${AWS_S3_BUCKET}/${AWS_S3_BUCKET_PATH}/ >/dev/null

    # Lambda options
    opts=()
    opts+=("--publish")
    opts+=("--runtime"); opts+=("python3.7")
    opts+=("--role"); opts+=("${arn}")
    opts+=("--handler"); opts+=("${function_name}.handler")
    opts+=("--function-name"); opts+=("${function_name}")
    opts+=("--code"); opts+=("S3Bucket=${AWS_S3_BUCKET},S3Key=${AWS_S3_BUCKET_PATH}/package.zip")

    # Create function on Lambda
    aws lambda create-function ${opts[@]}
}

function update() {
    function_name="$1"
    package="$2"

    # Lambda options
    opts=()
    opts+=("--publish")
    opts+=("--function-name"); opts+=("${function_name}")
    opts+=("--zip-file"); opts+=("fileb://${package}")

    # Update function on Lambda
    aws lambda update-function-code ${opts[@]}
}

function main() {
    # Check usage
    usage "$@"

    function_name="$1"
    package="$2"

    if exists "$function_name"
    then
        update "$function_name" "$package"
    else
        create "$function_name" "$package"
    fi
}

main "$@"
